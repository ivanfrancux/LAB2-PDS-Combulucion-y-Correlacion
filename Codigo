
import numpy as np
import matplotlib.pyplot as plt

# Definir el parámetro Ts y el rango de n
Ts = 1.25e-3  # Ts = 1.25 ms
n = np.arange(0, 9)  # 0 <= n < 9

# Definir las señales x1 y x2
x1 = np.cos(2 * np.pi * 100 * n * Ts)
x2 = np.sin(2 * np.pi * 100 * n * Ts)

# Calcular la correlación entre x1 y x2
correlacion = np.correlate(x1, x2, mode='full')

# Imprimir la representación secuencial de las señales y la correlación
print("Valores de la señal x1[nTs]:")
for i in range(len(n)):
    print(f"n = {n[i]}, x1[nTs] = {x1[i]}")

print("\nValores de la señal x2[nTs]:")
for i in range(len(n)):
    print(f"n = {n[i]}, x2[nTs] = {x2[i]}")

print("\nValores de la correlación entre x1 y x2:")
for i in range(len(correlacion)):
    print(f"Desplazamiento = {i-8}, Correlación = {correlacion[i]}")

# Crear la figura con tres subgráficos
plt.figure(figsize=(18, 6))

# Graficar x1
plt.subplot(1, 3, 1)
plt.stem(n, x1, label="x1[nTs]", basefmt=" ")
plt.title("Señal x1[nTs]")
plt.xlabel("n")
plt.ylabel("x1[n]")
plt.legend()
plt.grid(True)  # Activar la cuadrícula para x1

# Graficar x2
plt.subplot(1, 3, 2)
plt.stem(n, x2, label="x2[nTs]", basefmt=" ")
plt.title("Señal x2[nTs]")
plt.xlabel("n")
plt.ylabel("x2[n]")
plt.legend()
plt.grid(True)  # Activar la cuadrícula para x2

# Graficar la correlación
plt.subplot(1, 3, 3)
plt.stem(np.arange(-8, 9), correlacion, label="Correlación entre x1 y x2", basefmt=" ")
plt.title("Correlación entre x1 y x2")
plt.xlabel("Desplazamiento")
plt.ylabel("Correlación")
plt.legend()
plt.grid(True)  # Activar la cuadrícula para la correlación

# Ajustar el layout para que no se superpongan las gráficas
plt.tight_layout()

# Mostrar las gráficas
plt.show()
